// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: account.sql

package db

import (
	"context"
)

const addAccBalance = `-- name: AddAccBalance :one
UPDATE account
SET balance = balance + $2
WHERE id = $1
RETURNING id, balance
`

type AddAccBalanceParams struct {
	ID      int64 `json:"id"`
	Balance int32 `json:"balance"`
}

func (q *Queries) AddAccBalance(ctx context.Context, arg AddAccBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  balance
) VALUES (
  $1
) RETURNING id, balance
`

func (q *Queries) CreateAccount(ctx context.Context, balance int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, balance)
	var i Account
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, balance FROM account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, balance FROM account
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT id, balance FROM account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, balance FROM account
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subAccBalance = `-- name: SubAccBalance :one
UPDATE account
SET balance = balance - $2
WHERE id = $1
RETURNING id, balance
`

type SubAccBalanceParams struct {
	ID      int64 `json:"id"`
	Balance int32 `json:"balance"`
}

func (q *Queries) SubAccBalance(ctx context.Context, arg SubAccBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, subAccBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}
